(in-package :flywheel)

(defun maybe-get-file (path)
  (let ((static-folder (merge-pathnames "static/" *project-root*))
	(target-file (merge-pathnames path *project-root*)))
    (if	(and (uiop:subpathp target-file static-folder)
	     (uiop:file-exists-p target-file))
	(with-open-file (file target-file :element-type '(unsigned-byte 8))
	  (let ((data (make-array (file-length file) :element-type '(unsigned-byte 8))))
	    (read-sequence data file)
	    data))
	nil)))

(defun get-content-type (path)
  (cond
    ((uiop:string-suffix-p path ".png") "image/png")
    ((uiop:string-suffix-p path ".jpg") "image/jpeg")
    ((uiop:string-suffix-p path ".jpeg") "image/jpeg")
    ((uiop:string-suffix-p path ".gif") "image/gif")
    ((uiop:string-suffix-p path ".bmp") "image/bmp")
    ((uiop:string-suffix-p path ".webp") "image/webp")
    ((uiop:string-suffix-p path ".svg") "image/svg+xml")
    ((uiop:string-suffix-p path ".tiff") "image/tiff")
    ((uiop:string-suffix-p path ".html") "text/html")
    ((uiop:string-suffix-p path ".htm") "text/html")
    ((uiop:string-suffix-p path ".txt") "text/plain")
    ((uiop:string-suffix-p path ".css") "text/css")
    ((uiop:string-suffix-p path ".js") "application/javascript")
    ((uiop:string-suffix-p path ".json") "application/json")
    ((uiop:string-suffix-p path ".xml") "application/xml")
    ((uiop:string-suffix-p path ".pdf") "application/pdf")
    ((uiop:string-suffix-p path ".zip") "application/zip")
    ((uiop:string-suffix-p path ".tar") "application/x-tar")
    ((uiop:string-suffix-p path ".rar") "application/x-rar-compressed")
    ((uiop:string-suffix-p path ".7z") "application/x-7z-compressed")
    ((uiop:string-suffix-p path ".mp3") "audio/mpeg")
    ((uiop:string-suffix-p path ".wav") "audio/wav")
    ((uiop:string-suffix-p path ".ogg") "audio/ogg")
    ((uiop:string-suffix-p path ".mp4") "video/mp4")
    ((uiop:string-suffix-p path ".mkv") "video/x-matroska")
    ((uiop:string-suffix-p path ".avi") "video/x-msvideo")
    ((uiop:string-suffix-p path ".mov") "video/quicktime")
    (t "application/octet-stream")))


(defun handle-static-file (path)
  (let* ((normalized-path (if (uiop:string-prefix-p "/" path)
			      (subseq path 1)
			      path))
	 (content (maybe-get-file normalized-path)))
    (if content
	(list 200 `(:content-type ,(get-content-type path)) content)
	(list 404 nil (list "not found")))))
